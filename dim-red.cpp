#include<bits/stdc++.h>usingnamespacestd;classEdge{public:intv=0;intw=0;Edge(intv,intw){this->v=v;this->w=w;}Edge(){}};vector<int>dijkstra(vector<vector<Edge*>>&g,intsrc){intV=g.size();vector<int>dist(V,1e6);set<pair<int,int>>diset;diset.insert({0,src});dist[src]=0;while(!diset.empty()){pair<int,int>temp=*(diset.begin());diset.erase(diset.begin());
intu=temp.second;for(inti=0;i<g[u].size();i++){intv=g[u][i]->v;intweight=g[u][i]->w;if(dist[v]>dist[u]+weight){if(dist[v]!=1e6)diset.erase(diset.find({dist[v],v}));dist[v]=dist[u]+weight;diset.insert({dist[v],v});}}}returndist;}intmain(){clock_tclkStart=clock();intn,Max=1e6;cin>>n;vector<vector<int>>graph(n,vector<int>(n,Max));vector<vector<Edge*>>g(n,vector<Edge*>());for(inti=0;i<n;i++){for(intj=0;j<n;j++){cin>>graph[i][j];
if(i!=j){if(graph[i][j]==0)graph[i][j]=Max;else{g[i].push_back(newEdge(j,graph[i][j]));}}}}vector<vector<int>>minDis(n,vector<int>(n,Max));for(inti=0;i<n;i++){minDis[i]=dijkstra(g,i);}cout<<"Number of vertices are "<<n<<"\n";cout<<endl;cout<<"Theshortestpathfromsourcetootherverticesare:\n";cout<<endl;for(inti=0;i<n;i++){for(intj=0;j<n;j++){cout<<minDis[i][j]<<" ";}cout<<"\n";}clock_tclkFinish=clock();cout<<endl;cout<<"Execution time is "<<clkFinish-clkStart<<" ms"<<"\n";}